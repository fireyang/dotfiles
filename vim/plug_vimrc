"not a vi
set nocompatible
if has("mac")
    set encoding=utf-8
endif
set fileencodings=utf-8
scriptencoding utf-8
set fileformats=unix,dos,mac
" 双倍字符宽度
set ambiwidth=double
filetype off


" switch between YCM and NeoComplete
let neocomplete_mode = 1
if has("mac")
    let neocomplete_mode =0
endif

" Source the vimrc file after saving it
if has("autocmd")
    autocmd! bufwritepost .vimrc source $MYVIMRC
endif
"if has('vim_starting')
" install vundle
if !filereadable(glob("~/.vim/autoload/plug.vim"))
    echo "install plug-vim..."
    " :call system("curl -fLo ~/.vim/autoload/plug.vim --create-dirs \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim")
endif
" start plug
call plug#begin('~/.vim/plugged')
"endif

" Plug 'flazz/vim-colorschemes'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

Plug 'itchyny/lightline.vim'
set laststatus=2
set showmode
set showcmd
" Plug 'tomasr/molokai'
Plug 'nanotech/jellybeans.vim'
"colorscheme molokai " カラースキームにmolokaiを設定する


Plug 'dense-analysis/ale'
Plug 'andymass/vim-matchup'


set t_Co=256 " iTerm2など既に256色環境なら無くても良い

" 显示全角半角
Plug 'bronson/vim-trailing-whitespace'

"{{{ 缩进可视化 ps:json 双引号不可见
Plug 'Yggdroot/indentLine'
" let g:indentLine_conceallevel = '0'
autocmd Filetype json let g:indentLine_setConceal = 0
autocmd Filetype markdown let g:indentLine_conceallevel = 0
"}}}

" Split Management
" " ====>
set splitbelow
set splitright

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" ====

" Line endings
set fileformats=unix
set ff=unix


" general configs
set expandtab
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set autoindent
set ruler
set hidden
set smartcase
set smartindent
set showmatch
autocmd Filetype html setlocal ts=2 sts=2 sw=2
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
autocmd Filetype vue setlocal ts=2 sts=2 sw=2
set hls
"set relativenumber
"set ls=2
"set cursorline
set nowrap
set nocompatible

if has("mac")
    " set backspace=2
    set backspace=indent,eol,start
endif
set completeopt -=preview
set textwidth=95
set ttyfast
set cmdheight=1
set nu " 显示行号
set cursorline " 高亮当前行

" set autoread

"在输入命令时列出匹配项目，也就是截图底部的效果
"set wildmenu

"打开自动缩,继承前一行的缩进注释 进
set autoindent
"默认情况下手动折叠
"set foldmethod=manual
"取消高亮
map <leader>r :noh<cr>

"使用空格代替tab
set et

"ctags"
map <C-F12> :!ctags -R . <cr>
"set gfw=YouYuan:h8:cGB2312


" 不要生成swap文件
set noswapfile
"隐藏菜单栏
set guioptions-=m
"隐藏工具栏
set guioptions-=T
"set mapleader
let mapleader = ","
let g:snips_author = 'FireYang'
" ESC
noremap <leader><leader> <Esc>
" Open folder in Terminal
map <leader>. :!open -a Terminal .<cr>

" copy filename
map <silent> <leader>. :let @+=expand('%:p').':'.line('.')<CR>
" copy path
map <silent> <leader>/ :let @+=expand('%:p:h')<CR>

" search相关 {{{{
set incsearch
set ignorecase
set hlsearch
" 取消查找
nnoremap <silent><Esc><Esc> :<C-u>set nohlsearch!<CR>
map <leader>ft :call Search_Word()<CR>:cw<CR>
if !exists('*Search_Word')
    function Search_Word()
        let w = expand("<cword>") " 在当前光标位置抓词
        execute 'vimgrep /' . w . '/j **/*'
        "echo w
    endfunction
endif
"}}}}

" 移动 {{{
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk
" set backspace=indent,eol,start
"}}}

" paste  粘贴时忽略前置tab
if &term =~ "xterm"
    let &t_SI .= "\e[?2004h"
    let &t_EI .= "\e[?2004l"
    let &pastetoggle = "\e[201~"

    function XTermPasteBegin(ret)
        set paste
        return a:ret
    endfunction

    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
endif

"BufExplorer 插件{{{
"Plug 'bufexplorer.zip'
Plug 'jlanzarotta/bufexplorer'

" Close the current buffer
map <leader>bd :Bclose<cr>
"切换下一缓存区文件
map <leader>bn :bn<cr>
"切换上一缓存区文件
map <leader>bp :bp<cr>
" Close all the buffers
map <leader>ba :1,300 bd!<cr>
" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

" Fuzzy finder
"{{{
Plug 'airblade/vim-rooter'
" let g:rooter_change_directory_for_non_project_files = 'current'
"}}}
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
map <silent> <leader>1 :FZF<CR>
map <silent> <leader>2 :Buffers<CR>

" Semantic language support
"Plug 'phildawes/racer'
"Plug 'racer-rust/vim-racer'
" Plug 'ncm2/ncm2'
" Plug 'roxma/nvim-yarp'
" enable ncm2 for all buffers
" autocmd BufEnter * call ncm2#enable_for_buffer()
" IMPORTANT: :help Ncm2PopupOpen for more information
" set completeopt=noinsert,menuone,noselect

" Completion plugins
" Plug 'ncm2/ncm2-bufword'
" Plug 'ncm2/ncm2-tmux'
" Plug 'ncm2/ncm2-path'
" Plug 'ncm2/ncm2-go'



" Syntactic language support
Plug 'cespare/vim-toml'
Plug 'stephpy/vim-yaml'
Plug 'rust-lang/rust.vim'
"Plug 'fatih/vim-go'
Plug 'dag/vim-fish'
Plug 'godlygeek/tabular'
" {{{
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled = 1
"}}}


" 窗口区域切换,F5 后 ↑↓←→  来切换
"imap <silent> <C-h> <esc><C-W><left>
vmap <silent> <C-h> <esc><C-W><left>
nmap <silent> <C-h> <C-W><left>
"imap <silent> <C-l> <esc><C-W><right>
vmap <silent> <C-l> <esc><C-W><right>
nmap <silent> <C-l> <C-W><right>
"imap <silent> <C-k> <esc><C-W><up>
vmap <silent> <C-k> <esc><C-W><up>
nmap <silent> <C-k> <C-W><up>
"imap <silent> <C-j> <esc><C-W><down>
vmap <silent> <C-j> <esc><C-W><down>
nmap <silent> <C-j> <C-W><down>

inoremap <C-z> <C-O>u
nnoremap <C-z> u
" ctrl + y
"inoremap <C-y> <C-O><C-R>
"nnoremap <C-y> <C-R>
" ctrl + v
nnoremap <C-b> "+gP
inoremap <C-b> <C-O>"+gP
" ctrl + f
imap <C-f> <esc>:/
nmap <C-f> :/
" ctrl + r
imap <A-r> <esc>:%s/
vmap <A-r> <esc>:%s/
nmap <A-r> :%s/
" ctrl + o
"imap <C-o> <C-O>:e
"vmap <C-o> <esc>:e
"nmap <C-o> :e
"}}}

if version >603
set helplang=cn
set cmdheight=2
endi

"切换窗体，并最大化
"map <C-J> <C-W>j<C-W>_
"map <C-K> <C-W>k<C-W>_
"设置命令行2行
set cmdheight=2
"设置缓存
set nobackup
set ai
set lbr
set hls
"set no wrap
set nowrap

"Insert now date
"map <F3> :echo strftime("%Y-%m-%d %a %I:%M %p")<cr>

" QuickClose
map <leader>u :ZoomWin<cr>
map <leader><leader>u :close<cr>
" VSplit
map <leader>vs :vsplit<cr><C-l>
" Tab configuration
map <leader>tn :tabnew %<cr>
map <leader>te :tabedit
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>tl :tabN<cr>
map <leader>th :tabp<cr>
" Fast editing of the .vimrc
"map <leader>e :e! $HOME/.vimrc<cr>
"edit vimrc file
map <leader>e :exec "edit" '~/.vimrc'<cr>
" fast saving
map <leader>w :w<cr>
map <leader>q :q<cr>

""""""""""""""""""""""""""""""
" => Vim grep
""""""""""""""""""""""""""""""
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=/bin/grep\ -n
"switch to current directory
"切换到当前文件目录
map <leader>cd :cd %:p:h<CR>

" NERDTree插件的快捷键
Plug 'scrooloose/nerdtree'
"imap <silent> <F7> <esc>:NERDTreeToggle<CR>
"nmap <silent> <F7> :NERDTreeToggle<CR>
imap <leader>nt <esc>:NERDTreeToggle<CR>
nmap <leader>nt :NERDTreeToggle<CR>
" bufkill bd's: really do not mess with NERDTree buffer
nnoremap <silent> <backspace> :BD<cr>
nnoremap <silent> <s-backspace> :BD!<cr>
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1

" Prevent :bd inside NERDTree buffer
au FileType nerdtree cnoreabbrev <buffer> bd <nop>
au FileType nerdtree cnoreabbrev <buffer> BD <nop>
"NERDTree过滤文件
let NERDTreeIgnore=['.lock$', '.svn$','.fla$','.doc$','.swc$','\.o$']
"NERDTree标签文件目录
"let NERDTreeBookmarksFile='/Users/fireyang/soft/MacVim-7_3-53/NerdBookmarks.txt'
"let NERDTreeBookmarksFile='d:/Users/fireyang/soft/MacVim-7_3-53/NerdBookmarks.txt'
" }}}

Plug 'jistr/vim-nerdtree-tabs'
" let g:nerdtree_tabs_open_on_console_startup = 1

Plug 'Xuyuanp/nerdtree-git-plugin'
" 注释
Plug 'scrooloose/nerdcommenter'
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Plug 'Lokaltog/powerline-fonts'
" Plug 'pangloss/vim-javascript'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-vinegar'
Plug 'altercation/vim-colors-solarized'
Plug 'mileszs/ack.vim'
let g:ack_default_options =
            \ " -s -H --nocolor --nogroup --column --smart-case --follow"
"erlang
Plug 'oscarh/vimerl'
" Elixir
Plug 'elixir-lang/vim-elixir'
Plug 'mattreduce/vim-mix'
"Plug 'mmorearty/elixir-ctags'
"au BufRead,BufNewFile *.ex set filetype=elixir
"au BufRead,BufNewFile *.exs set filetype=elixir
"nnoremap <leader>t :!mix test --no-color %<CR>

" Elixir
Plug 'slashmili/alchemist.vim'
" Phoenix
Plug 'c-brenn/phoenix.vim'

" HTML5
" Plug 'othree/html5.vim'

"Golang
" Plug 'nsf/gocode', {'rtp': 'vim/'}
Plug 'fatih/vim-go'
let g:syntastic_go_checkers = []
" save auto imports
let g:go_fmt_command = "goimports"

"
Plug 'uarun/vim-protobuf'

" {{{ c.vim
" Plug 'vim-scripts/c.vim'
Plug 'vim-jp/vim-cpp'
" Plug 'vim-scripts/a.vim'
map <leader>a :A<cr>
map <leader>b :AV<cr>
" }}}

" {{{  typescript
Plug 'leafgarland/typescript-vim'
" }}}
"
Plug 'Shougo/vimproc.vim'
Plug 'Shougo/vimshell.vim'
Plug 'Shougo/unite.vim'
Plug 'Shougo/neomru.vim'

" Cool tab completion stuff
" Plug 'ervandew/supertab'
" set wildmenu
"set wildmode=list:longest,full


" ==== DECORATION ====>>
" Some nice themes
Plug 'gmarik/ingretu'
Plug 'croaker/mustang-vim'
Plug 'morhetz/gruvbox'
Plug 'adlawson/vim-sorcerer'
" Plug 'vim-scripts/strange'
Plug 'rcdilorenzo/vim-colors-pencil'

" rust lang
Plug 'rust-lang/rust.vim'
" let g:rustfmt_autosave = 1
Plug 'cespare/vim-toml'


" latex
Plug 'lervag/vimtex'

" Font (download for compatility with airline)
" set guifont=Sauce\ Code\ Powerline:h13
set guifont=Hack:h13

" <<==== DECORATION ====

" ====== STATUSBAR ====>>
" Turn on statusbar
set ruler

" Always show the statusline
 set laststatus=2
 Plug 'vim-airline/vim-airline'
 Plug 'vim-airline/vim-airline-themes'

" 自动补全
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
" nmap <silent> <C-d> <Plug>(coc-range-select)
" xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" <<<<<<<<<<<<<<<<<<<<<<<<<<<< end coc default config

" <<==== STATUSBAR ====
"
" Plug 'posva/vim-vue'

" Initialize plugin system
call plug#end()
filetype plugin indent on
syntax enable

" Theme
set background=dark

if has("mac")
    " colorscheme base16-default-dark
    colorscheme jellybeans
else
    colorscheme desert
endif
" from http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
endif

if executable('rg')
    " set grepprg=rg\ --no-heading\ --vimgrep
    set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
    set grepformat=%f:%l:%c:%m
endif

" Jump to last edit position on opening file
if has("autocmd")
    " https://stackoverflow.com/questions/31449496/vim-ignore-specifc-file-in-autocommand
    au BufReadPost * if expand('%:p') !~# '\m/\.git/' && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

